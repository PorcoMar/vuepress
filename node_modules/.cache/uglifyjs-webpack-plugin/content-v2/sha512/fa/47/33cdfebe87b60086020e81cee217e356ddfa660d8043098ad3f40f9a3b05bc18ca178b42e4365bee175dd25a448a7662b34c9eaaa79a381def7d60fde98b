{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{52:function(e,n,s){\"use strict\";s.r(n);var a=s(0),t=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,s=e._self._c||n;return s(\"div\",{staticClass:\"content\"},[s(\"h1\",{attrs:{id:\"使用-webpack3-配置多页应用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-webpack3-配置多页应用\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 使用 webpack3 配置多页应用\")]),s(\"p\",[e._v(\"为什么需要使用 webpack 构建多页应用呢？因为某些项目使用 SPA 不太合适（大多是 SEO 的原因），或者您在做项目时有其他的需求。\\n如果你有如下需求：\")]),s(\"p\",[e._v(\"使用 ES6 进行开发\\n期望使用面向对象开发（class）\\n自动压缩合并 CSS 和 JS 文件\\n使用 ESLint 进行代码检查\\n自动生成 HTML 文件\\n自动抽取 CSS 文件\\n···\\n有了这些需求，基本上就必须使用 webpack 了。\")]),s(\"h2\",{attrs:{id:\"安装依赖\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装依赖\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 安装依赖\")]),s(\"p\",[e._v(\"首先是项目中需要使用的依赖安装。\")]),s(\"ol\",[s(\"li\",[s(\"p\",[e._v(\"安装 webpack 和 webpack-dev-server\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install webpack webpack-dev-server --save-dev\\n\")])])]),s(\"li\",[s(\"p\",[e._v(\"安装 webpack-merge\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install webpack-merge --save-dev\\n\")])])])]),s(\"p\",[e._v(\"该插件用来对 webpack 配置进行合并操作。\")]),s(\"ol\",{attrs:{start:\"3\"}},[s(\"li\",[s(\"p\",[e._v(\"安装 babel 相关插件\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install babel-core babel-loader babel-preset-env --save-dev\\n\")])])])]),s(\"p\",[e._v(\"这系列插件用来对 ES6 语法进行转换。\")]),s(\"ol\",{attrs:{start:\"4\"}},[s(\"li\",[s(\"p\",[e._v(\"安装样式处理相关插件\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install css-loader style-loader postcss-loader autoprefixer --save-dev\\n\")])])])]),s(\"p\",[e._v(\"这系列插件用来处理 CSS 样式，其中 autoprefixer 是 postcss 的一个插件，用来自动给 CSS 样式添加前缀。\")]),s(\"ol\",{attrs:{start:\"5\"}},[s(\"li\",[e._v(\"安装 file-loader\")])]),s(\"p\",[e._v(\"该插件将在导入图片、字体等文件时发挥作用。PS.您也可以安装 url-loader 以实现相同的作用：\")]),s(\"pre\",[s(\"code\",[e._v(\"    npm install file-loader --save-dev\\n\\n    npm install url-loader --save-dev\\n\")])]),s(\"ol\",{attrs:{start:\"6\"}},[s(\"li\",[s(\"p\",[e._v(\"安装 ESLint 相关的插件\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install eslint eslint-loader --save-dev\\n\")])])])]),s(\"p\",[e._v(\"这些插件用来对 JavaScript 代码进行检查。\")]),s(\"ol\",{attrs:{start:\"7\"}},[s(\"li\",[s(\"p\",[e._v(\"安装 html-webpack-plugin 插件\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install html-webpack-plugin --save-dev\\n\")])])])]),s(\"p\",[e._v(\"该插件用来自动生成 HTML 文件。\")]),s(\"ol\",{attrs:{start:\"8\"}},[s(\"li\",[s(\"p\",[e._v(\"安装 extract-text-webpack-plugin 插件\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install extract-text-webpack-plugin --save-dev\\n\")])])])]),s(\"p\",[e._v(\"该插件用来将 CSS 抽取到独立的文件。\")]),s(\"ol\",{attrs:{start:\"9\"}},[s(\"li\",[s(\"p\",[e._v(\"安装 clean-webpack-plugin 插件\")]),s(\"pre\",[s(\"code\",[e._v(\" npm install clean-webpack-plugin --save-dev\\n\")])])])]),s(\"p\",[e._v(\"该插件用来对 dist 文件夹进行清理工作，每次打包时先清理之前的 dist 文件夹。\")]),s(\"h4\",{attrs:{id:\"下面是这些安装了的所有依赖：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#下面是这些安装了的所有依赖：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 下面是这些安装了的所有依赖：\")]),s(\"pre\",[s(\"code\",[e._v('    ...\\n      \"devDependencies\": {\\n        \"autoprefixer\": \"^7.1.3\",\\n        \"babel-core\": \"^6.26.0\",\\n        \"babel-loader\": \"^7.1.2\",\\n        \"babel-preset-env\": \"^1.6.0\",\\n        \"clean-webpack-plugin\": \"^0.1.16\",\\n        \"css-loader\": \"^0.28.7\",\\n        \"eslint\": \"^4.6.1\",\\n        \"eslint-loader\": \"^1.9.0\",\\n        \"extract-text-webpack-plugin\": \"^3.0.0\",\\n        \"file-loader\": \"^0.11.2\",\\n        \"html-webpack-plugin\": \"^2.30.1\",\\n        \"postcss-loader\": \"^2.0.6\",\\n        \"style-loader\": \"^0.18.2\",\\n        \"url-loader\": \"^0.5.9\",\\n        \"webpack\": \"^3.5.5\",\\n        \"webpack-dev-server\": \"^2.7.1\",\\n        \"webpack-merge\": \"^4.1.0\"\\n      },\\n    ...\\n')])]),s(\"h2\",{attrs:{id:\"配置文件划分\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置文件划分\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 配置文件划分\")]),s(\"p\",[e._v(\"使用 webpack 进行项目构建时，我们有不同的目的，因此最好将配置文件进行拆分，以适应不同的工作：\")]),s(\"pre\",[s(\"code\",[e._v(\"    ├─config\\n    │      config.js\\n    │      webpack.config.base.js\\n    │      webpack.config.dev.js\\n    │      webpack.config.lint.js\\n    │      webpack.config.prod.js\\n    │  webpack.config.js\\n\")])]),s(\"h4\",{attrs:{id:\"下面是一些配置的说明：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#下面是一些配置的说明：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 下面是一些配置的说明：\")]),s(\"pre\",[s(\"code\",[e._v(\"    config.js：一些全局的配置，比如 HTML 文件的路径、publicPath 等\\n    webpack.config.base.js：最基础的配置文件\\n    webpack.config.dev.js：开发环境配置文件\\n    webpack.config.lint.js：使用 ESLint 代码检查时的配置文件\\n    webpack.config.prod.js：生产环境配置文件\\n    webpack.config.js：主配置文件，根据环境变量引用相应的环境的配置\\n\")])]),s(\"p\",[e._v(\"这些配置文件之间是通过 webpack-merge 这个插件进行合并的。\")]),s(\"h2\",{attrs:{id:\"配置多页应用的关键点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置多页应用的关键点\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 配置多页应用的关键点\")]),s(\"p\",[e._v(\"如何使用 webpack 配置多页面应用呢？实现多页面应用的关键点在哪里呢？首先需要简单看一下多页应用和单页应用功能的区别。\")]),s(\"h4\",{attrs:{id:\"单页应用的特点：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单页应用的特点：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 单页应用的特点：\")]),s(\"p\",[e._v(\"只有一个入口页面（index.html）\\n这个单页页面（index.html）中需要引入打包后的所有 JavaScript 文件\\n所有的页面内容完全由 JavaScript 生成\\n单页应用有自己的路由系统，服务器端没有和路由对应的文件\\n···\")]),s(\"h4\",{attrs:{id:\"多页应用的特点：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多页应用的特点：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 多页应用的特点：\")]),s(\"p\",[e._v(\"每个版块对应一个页面\\n每个页面需要对公共的 JavaScript 进行引入\\n每个页面还需要引入和其自身对应的 JavaScript 文件\\n由于对应了多个页面，因此不是所有页面内容都是由 JavaScript 生成的\\n没有自己的路由系统，服务器端有对应的静态文件\\n···\\n抛开生成页面内容和路由系统，我们可以看到单页应用和多页应用最大的区别就是：\")]),s(\"p\",[e._v(\"单页应用需要在入口页面引入所有的 JavaScript 文件\\n多页应用需要在每个页面中引入公共的 JavaScript 文件以及其自身的 JavaScript 文件\\n由于 CSS 文件是可以由 extract-text-webpack-plugin 这个插件自动提取并插入到 HTML 页面的，因此我们只需要关心如何在 HTML 页面中引入 JavaScript 文件了。\\nwebpack 在打包时，会将入口文件中的 JavaScript 文件打包到某个目标文件中，在不考虑代码分割提取的情况下，一个入口文件会打包为一个目标文件，多个入口文件会打包为多个对应的目标文件。\\n因此，我们可以将每个多页页面中的特有的 JavaScript 文件作为入口文件，在打包时将对应打包成不同的 bundle 文件（结果文件），如果你想要的话，还可以在打包时进行代码分割处理，将公用代码抽取成一个文件，然后在 HTML 中引入这些 JavaScript 文件就好了。\\n总结一下，使用 webpack 配置多页应用的关键点在于：\")]),s(\"p\",[e._v(\"将每个页面中特有的 JavaScript 文件作为入口文件进行打包\\n在打包后，每个页面中都需要引入这些打包后的文件\\n您可以在打包时进行公用代码提取，然后在 HTML 文件中引入\\n说了这么多，其实就是利用了 webpack 多入口文件进行打包。\")]),s(\"h2\",{attrs:{id:\"自动生成-html-页面\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动生成-html-页面\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 自动生成 HTML 页面\")]),s(\"p\",[e._v(\"在使用 webpack 对 JavaScript 文件进行打包时，通常需要在打包的文件名中加一个 hash 字符串用来防止缓存，当我们修改了 JavaScript 代码后，打包后的文件名也会发生变化。此时如果手动在 HTML 中引用这些 JavaScript 文件，是非常麻烦的。\\n因此，我们期望能自动生成 HTML 文件，并自动引用打包后的 JavaScript 文件。所谓自动生成 HTML 文件，可以理解为将源代码的 HTML 复制到目标文件夹中，同时自动引用打包后的 JavaScript 文件。\\n要完成这项操作，就需要使用前面安装的 html-webpack-plugin 这个插件。\")]),s(\"h2\",{attrs:{id:\"html-webpack-plugin-插件的使用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#html-webpack-plugin-插件的使用\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" html-webpack-plugin 插件的使用\")]),s(\"p\",[e._v(\"首先，在我的项目中，有这么一些 HTML 页面，将它们放在 html 文件夹中：\")]),s(\"pre\",[s(\"code\",[e._v(\"    Mode                LastWriteTime         Length Name\\n    ----                -------------         ------ ----\\n    -a----         2017/9/5     18:04           1071 company_intro.html\\n    -a----         2017/9/5     18:04            988 contact_us.html\\n    -a----         2017/9/5     18:04           1131 cooperate.html\\n    -a----         2017/9/5     18:04           1244 enterprise_culture.html\\n    -a----         2017/9/5     18:04           1011 hornors.html\\n    -a----         2017/9/5     18:04           1365 index.html\\n    -a----         2017/9/5     18:04           1769 investment.html\\n    -a----         2017/9/5     18:04           1005 join_us.html\\n    -a----         2017/9/5     18:04           1037 news_center.html\\n    -a----         2017/9/5     18:04            987 news_item.html\\n    -a----         2017/9/5     18:04           1134 operate.html\\n    -a----         2017/9/5     18:04           1255 product.html\\n    -a----         2017/9/5     18:04           1132 schools.html\\n\")])]),s(\"p\",[e._v(\"然后，把这些 HTML 文件名（不要后缀）都写在 config.js 文件中，以供取用：\")]),s(\"pre\",[s(\"code\",[e._v('    module.exports = {\\n        HTMLDirs:[\\n            \"index\",\\n            \"company_intro\",\\n            \"enterprise_culture\",\\n            \"hornors\",\\n            \"news_center\",\\n            \"news_item\",\\n            \"product\",\\n            \"schools\",\\n            \"operate\",\\n            \"cooperate\",\\n            \"join_us\",\\n            \"contact_us\",\\n            \"investment\"\\n        ],\\n    }\\n')])]),s(\"p\",[e._v(\"HTMLDirs 是一个数组，其中保存了项目中会用到的所有 HTML 页面。\\n接下来，每个 HTML 页面都对应一份 JavaScript 代码，因此在 js 文件夹中建立对应的 JavaScript 文件：\")]),s(\"pre\",[s(\"code\",[e._v(\"    Mode                LastWriteTime         Length Name\\n    ----                -------------         ------ ----\\n    -a----         2017/9/5     18:04           2686 company_intro.js\\n    -a----         2017/9/5     18:04            594 contact_us.js\\n    -a----         2017/9/5     18:04           1725 cooperate.js\\n    -a----         2017/9/8     16:54           3505 enterprise_culture.js\\n    -a----         2017/9/5     18:04           2208 hornors.js\\n    -a----         2017/9/8     16:54           4491 index.js\\n    -a----         2017/9/5     18:04           3180 investment.js\\n    -a----         2017/9/5     18:04           1327 join_us.js\\n    -a----         2017/9/8     16:55           3689 news_center.js\\n    -a----         2017/9/5     18:04           1972 news_item.js\\n    -a----         2017/9/5     18:04           2728 operate.js\\n    -a----         2017/9/5     18:04           2664 product.js\\n    -a----         2017/9/5     18:04           2476 schools.js\\n\")])]),s(\"p\",[e._v(\"这两项是必须的，只有提供了每个页面的 HTML 文件和对应的 JavaScript 文件，才能构建多页面应用。\\n同时，可能每个页面都有自己的样式，因此您也可以在 css 文件夹中建立一些样式文件：\")]),s(\"pre\",[s(\"code\",[e._v(\"    Mode                LastWriteTime         Length Name\\n    ----                -------------         ------ ----\\n    -a----         2017/9/5     18:04            419 company_intro.css\\n    -a----         2017/9/5     18:04            167 contact_us.css\\n    -a----         2017/9/5     18:04            214 cooperate.css\\n    -a----         2017/9/5     18:04            926 enterprise_culture.css\\n    -a----         2017/9/5     18:04            255 hornors.css\\n    -a----         2017/9/5     18:04            693 investment.css\\n    -a----         2017/9/5     18:04            136 join_us.css\\n    -a----         2017/9/5     18:04            541 news_center.css\\n    -a----         2017/9/5     18:04            623 news_item.css\\n    -a----         2017/9/5     18:04            342 operate.css\\n    -a----         2017/9/5     18:04            236 product.css\\n    -a----         2017/9/5     18:04            213 schools.css\\n\")])]),s(\"p\",[e._v(\"关于建立样式这一项，不是必须的。\\n最后，我们就可以使用 html-webpack-plugin 这个插件来自动生成 HTML 文件了，html-webpack-plugin 插件的用法如下：\")]),s(\"pre\",[s(\"code\",[e._v('    // 引入插件\\n    const HTMLWebpackPlugin = require(\"html-webpack-plugin\");\\n    // 引入多页面文件列表\\n    const { HTMLDirs } = require(\"./config\");\\n    // 通过 html-webpack-plugin 生成的 HTML 集合\\n    let HTMLPlugins = [];\\n    // 入口文件集合\\n    let Entries = {}\\n\\n    // 生成多页面的集合\\n    HTMLDirs.forEach((page) => {\\n        const htmlPlugin = new HTMLWebpackPlugin({\\n            filename: `${page}.html`,\\n            template: path.resolve(__dirname, `../app/html/${page}.html`),\\n            chunks: [page, \\'commons\\'],\\n        });\\n        HTMLPlugins.push(htmlPlugin);\\n        Entries[page] = path.resolve(__dirname, `../app/js/${page}.js`);\\n    })\\n')])]),s(\"p\",[e._v(\"在上面的代码中，首先引入了所需的插件和变量，然后利用 html-webpack-plugin 循环生成 HTML 页面。\\n简单说下 HTMLWebpackPlugin 构造函数的几个参数：\")]),s(\"p\",[e._v(\"filename：生成的 HTML 文件名，我这里选择和原始文件名保持一致\\ntemplate：生成 HTML 文件使用的模板，也就是我们之前在 html 文件夹中建立的那些文件\\nchunks：生成 HTML 文件时会自动插入相应的代码片段（也就是 JavaScript 文件），我这里选择插入每个页面对应的 JavaScript 文件，以及最后提取出来的公共文件代码块。\\n关于 chunks 还需要说明一点，chunks 是一个数组，在生成 HTML 文件时会将数组中的对应的 JavaScript 片段自动插入到 HTML 中，这些片段也就是 webpack 打包时的 output 选项中的 [name]。这里只需要写上 [name] 值就行了，无需使用打包生成的完整名称，因为这会还没开始打包呢，打包后生成的名称咱也不知道。\\n最后，我们把这些生成 HTML 文件的配置插入到 HTMLPlugins 这个数组中，同时设置 webpack 的入口文件。\")]),s(\"h2\",{attrs:{id:\"目录划分\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#目录划分\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 目录划分\")]),s(\"p\",[e._v(\"在这个脚手架中，我是这样划分项目结构的：\")]),s(\"pre\",[s(\"code\",[e._v(\"    ├─app\\n    │  ├─css\\n    │  ├─html\\n    │  ├─img\\n    │  ├─js\\n    │  └─lib\\n    ├─config\\n    └─dist\\n        ├─css\\n        ├─img\\n        └─js\\n    其中 app 是项目的源码，config 是 webpack 相关的一些配置文件，dist 是存放打包后的文件，是由 webpack 自动生成的。\\n    更详细的文件结构如下：\\n\\n    │  .babelrc\\n    │  .eslintrc.js\\n    │  .gitignore\\n    │  package.json\\n    │  postcss.config.js\\n    │  webpack.config.js\\n    │  \\n    ├─app\\n    │  │  favicon.ico\\n    │  │  \\n    │  ├─css\\n    │  │      main.css\\n    │  │      \\n    │  ├─html\\n    │  │      index.html\\n    │  │    \\n    │  │      \\n    │  ├─img\\n    │  │      back.png\\n    │  │      \\n    │  ├─js\\n    │  │      ajax.js\\n    │  │      footer.js\\n    │  │      index.js\\n    │  │      nav.js\\n    │  │      public.js\\n    │  │      tity_nav.js\\n    │  │      \\n    │  └─lib\\n    │        flexible.js\\n    │        normalize.css\\n    │        swiper.css\\n    │        swiper.js\\n    │        \\n    └─config\\n            config.js\\n            webpack.config.base.js\\n            webpack.config.dev.js\\n            webpack.config.lint.js\\n            webpack.config.prod.js\\n\")])]),s(\"h2\",{attrs:{id:\"package-json\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#package-json\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" package.json\")]),s(\"p\",[e._v(\"所有的功能都是从 package.json 的 scripts 入口开始执行的，我想要脚手架有以下功能：\")]),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"开发环境构建\")])]),s(\"li\",[s(\"p\",[e._v(\"生产环境构建\")])]),s(\"li\",[s(\"p\",[e._v(\"ESLint 代码检查环境\")])]),s(\"li\",[s(\"p\",[e._v(\"生产环境构建后的服务器预览环境\")])]),s(\"li\",[s(\"p\",[e._v(\"在开发或代码检查环境，需要启用 webpack-dev-server 命令，生产环境构建需要启用 webpack 命令，预览环境需要启用 http-server 环境。\")])]),s(\"li\",[s(\"p\",[e._v(\"上文介绍时把 http-server 给落下了，您现在可以进行如下安装：\")]),s(\"pre\",[s(\"code\",[e._v(\"  npm install http-server --save-dev\\n\")])])])]),s(\"p\",[e._v(\"scripts 命令行配置如下：\")]),s(\"pre\",[s(\"code\",[e._v('      \"scripts\": {\\n        \"dev\": \"set NODE_ENV=dev && webpack-dev-server --open\",\\n        \"build\": \"set NODE_ENV=prod && webpack -p\",\\n        \"lint\": \"set NODE_ENV=lint && webpack-dev-server --open\",\\n        \"serve\": \"http-server ./dist -p 8888 -o\",\\n        \"serve2\": \"http-server ./dist -p 8888\"\\n      },\\n')])]),s(\"p\",[e._v(\"下面是整个 package.json 文件：\")]),s(\"pre\",[s(\"code\",[e._v('    {\\n      \"name\": \"xxx\",\\n      \"version\": \"1.0.0\",\\n      \"description\": \"\",\\n      \"main\": \"index.js\",\\n      \"scripts\": {\\n        \"dev\": \"set NODE_ENV=dev && webpack-dev-server --open\",\\n        \"build\": \"set NODE_ENV=prod && webpack -p\",\\n        \"lint\": \"set NODE_ENV=lint && webpack-dev-server --open\",\\n        \"serve\": \"http-server ./dist -p 8888 -o\",\\n        \"serve2\": \"http-server ./dist -p 8888\"\\n      },\\n      \"author\": \"\",\\n      \"license\": \"ISC\",\\n      \"devDependencies\": {\\n        \"autoprefixer\": \"^7.1.3\",\\n        \"babel-core\": \"^6.26.0\",\\n        \"babel-loader\": \"^7.1.2\",\\n        \"babel-plugin-transform-es2015-spread\": \"^6.22.0\",\\n        \"babel-preset-env\": \"^1.6.0\",\\n        \"clean-webpack-plugin\": \"^0.1.16\",\\n        \"css-loader\": \"^0.28.7\",\\n        \"eslint\": \"^4.5.0\",\\n        \"eslint-loader\": \"^1.9.0\",\\n        \"extract-text-webpack-plugin\": \"^3.0.0\",\\n        \"file-loader\": \"^0.11.2\",\\n        \"html-webpack-plugin\": \"^2.30.1\",\\n        \"http-server\": \"^0.10.0\",\\n        \"postcss-loader\": \"^2.0.6\",\\n        \"style-loader\": \"^0.18.2\",\\n        \"url-loader\": \"^0.5.9\",\\n        \"webpack\": \"^3.5.5\",\\n        \"webpack-dev-server\": \"^2.7.1\",\\n        \"webpack-merge\": \"^4.1.0\"\\n      },\\n      \"dependencies\": {}\\n    }\\n')])]),s(\"h2\",{attrs:{id:\"启用环境\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#启用环境\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 启用环境\")]),s(\"p\",[e._v(\"如果您想启用某个环境，需要使用 npm run xxx 命令：\")]),s(\"ul\",[s(\"li\",[e._v(\"npm run dev：进入开发环境\")]),s(\"li\",[e._v(\"npm run build：进入生产环境\")]),s(\"li\",[e._v(\"npm run lint：执行代码检查\")]),s(\"li\",[e._v(\"npm run serve：服务器环境下预览（打开浏览器）\")]),s(\"li\",[e._v(\"npm run serve2：服务器环境下预览（不打开浏览器）\\n默认情况下，使用这些命令都会先引入和 package.js 同目录下的 webpack.config.js 文件。由于我们不会将所有的配置都放在 webpack.config.js 中，而是过环境变量进行区分，在 webpack.config.js 中引用其他的配置文件。\\n设置环境变量采用的语法：\")])]),s(\"p\",[e._v(\"set NODE_ENV=xxx\\n这里我们为开发、生产、代码检查和预览这几个环境设置了环境变量。\")]),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"webpack.config.js\")])]),s(\"li\",[s(\"p\",[e._v(\"webpack.config.js 文件比较简单，只有两行代码，其作用就是用来引用其他的配置文件：\")]),s(\"pre\",[s(\"code\",[e._v('  // 获取环境命令，并去除首尾空格\\n  const env = process.env.NODE_ENV.replace(/(\\\\s*$)|(^\\\\s*)/ig,\"\");\\n  // 根据环境变量引用相关的配置文件\\n  module.exports = require(`./config/webpack.config.${env}.js`)\\n  webpack.config.base.js\\n')])])])]),s(\"p\",[e._v(\"webpack.config.base.js 是最基础的配置文件，包含了这些环境都可能使用到的配置。\")]),s(\"h4\",{attrs:{id:\"_1）相关插件引入\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1）相关插件引入\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1）相关插件引入\")]),s(\"hr\"),s(\"pre\",[s(\"code\",[e._v('    const path = require(\"path\");\\n    // 引入插件\\n    const HTMLWebpackPlugin = require(\"html-webpack-plugin\");\\n    // 清理 dist 文件夹\\n    const CleanWebpackPlugin = require(\"clean-webpack-plugin\")\\n    // 抽取 css\\n    const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\\n')])]),s(\"h4\",{attrs:{id:\"_2）自动生成-html-的配置\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2）自动生成-html-的配置\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2）自动生成 HTML 的配置\")]),s(\"pre\",[s(\"code\",[e._v(\"    // 引入多页面文件列表\\n    const config = require(\\\"./config\\\");\\n    // 通过 html-webpack-plugin 生成的 HTML 集合\\n    let HTMLPlugins = [];\\n    // 入口文件集合\\n    let Entries = {}\\n\\n    // 生成多页面的集合\\n    config.HTMLDirs.forEach((page) => {\\n        const htmlPlugin = new HTMLWebpackPlugin({\\n            filename: `${page}.html`,\\n            template: path.resolve(__dirname, `../app/html/${page}.html`),\\n            chunks: [page, 'commons'],\\n        });\\n        HTMLPlugins.push(htmlPlugin);\\n        Entries[page] = path.resolve(__dirname, `../app/js/${page}.js`);\\n    })\\n\")])]),s(\"h4\",{attrs:{id:\"_3）主配置文件一览\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3）主配置文件一览\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3）主配置文件一览\")]),s(\"pre\",[s(\"code\",[e._v('    module.exports = {\\n        // 入口文件\\n        entry:Entries,\\n        // 启用 sourceMap\\n        devtool:\"cheap-module-source-map\",\\n        // 输出文件\\n        output:{},\\n        // 加载器\\n        module:{\\n            rules:[\\n            ],\\n        },\\n        // 插件\\n        plugins:[],\\n    }\\n')])]),s(\"h4\",{attrs:{id:\"_4）配置-css-加载器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4）配置-css-加载器\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4）配置 css 加载器\")]),s(\"pre\",[s(\"code\",[e._v('    {\\n        // 对 css 后缀名进行处理\\n        test:/\\\\.css$/,\\n        // 不处理 node_modules 文件中的 css 文件\\n        exclude: /node_modules/,\\n        // 抽取 css 文件到单独的文件夹\\n        use: ExtractTextPlugin.extract({\\n            fallback: \"style-loader\",\\n            // 设置 css 的 publicPath\\n            publicPath: config.cssPublicPath,\\n            use: [{\\n                    loader:\"css-loader\",\\n                    options:{\\n                        // 开启 css 压缩\\n                        minimize:true,\\n                    }\\n                },\\n                {\\n                    loader:\"postcss-loader\",\\n                }\\n            ]\\n        })\\n    },\\n')])]),s(\"p\",[e._v(\"这里有两点需要说明：\\nA.publicPath：在 css 中设置背景图像的 url 时，经常会找不到图片（默认会在 css 文件所在的文件夹中寻找），这里设置 extract-text-webpack-plugin 插件的 publicPath 为图片文件夹所在的目录，就可以顺利找到图片了。\\n在 config.js 中，设置 cssPublicPath 的值：\")]),s(\"p\",[e._v('cssPublicPath:\"../\"\\nB.postcss 我主要用来自动添加 css 前缀以及一点美化操作，在使用 postcss 时，需要在 postcss.config.js 中进行配置：')]),s(\"pre\",[s(\"code\",[e._v(\"    module.exports = {  \\n      plugins: {  \\n        'autoprefixer': {\\n            browsers: ['last 5 version','Android >= 4.0'],\\n            //是否美化属性值 默认：true \\n            cascade: true,\\n            //是否去掉不必要的前缀 默认：true \\n            remove: true\\n        }  \\n      }  \\n    }  \\n\")])]),s(\"h4\",{attrs:{id:\"_5）配置-js-加载器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5）配置-js-加载器\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 5）配置 js 加载器\")]),s(\"p\",[e._v(\"js 加载器的配置如下：\")]),s(\"pre\",[s(\"code\",[e._v(\"    {\\n        test: /\\\\.js$/,\\n        exclude: /node_modules/,\\n        use: {\\n            loader: 'babel-loader',\\n            options: {\\n                presets: ['env']\\n            }\\n        }\\n    },\\n\")])]),s(\"h4\",{attrs:{id:\"_6）配置图片加载器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6）配置图片加载器\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 6）配置图片加载器\")]),s(\"p\",[e._v(\"图片加载器的配置如下：\")]),s(\"pre\",[s(\"code\",[e._v('    {\\n        test: /\\\\.(png|svg|jpg|gif)$/,\\n        use:{\\n            loader:\"file-loader\",\\n            options:{\\n                // 打包生成图片的名字\\n                name:\"[name].[ext]\",\\n                // 图片的生成路径\\n                outputPath:config.imgOutputPath\\n            }\\n        }\\n    },\\n')])]),s(\"p\",[e._v(\"outputPath 规定了输出图片的位置，默认情况下，图片在打包时会和所有的 HTML/CSS/JS 文件打包到一起，通过设置 outputPath 值可以将所有的图片都打包到一个单独的文件中。\\n设置 config.js 的 imgOutputPath：\")]),s(\"p\",[e._v('imgOutputPath:\"img/\",\\n在打包时，会将所有的图片打包到 dist 文件夹下的 img 文件夹中。')]),s(\"h4\",{attrs:{id:\"_7）配置自定义字体加载器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7）配置自定义字体加载器\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 7）配置自定义字体加载器\")]),s(\"p\",[e._v(\"自定义字体加载器的配置如下：\")]),s(\"pre\",[s(\"code\",[e._v('    {\\n        test: /\\\\.(woff|woff2|eot|ttf|otf)$/,\\n        use:[\"file-loader\"]\\n    }\\n')])]),s(\"h4\",{attrs:{id:\"_8）插件配置\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8）插件配置\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 8）插件配置\")]),s(\"p\",[e._v(\"插件配置如下：\")]),s(\"pre\",[s(\"code\",[e._v('    plugins:[\\n        // 自动清理 dist 文件夹\\n        new CleanWebpackPlugin([\"dist\"]),\\n        // 将 css 抽取到某个文件夹\\n        new ExtractTextPlugin(config.cssOutputPath),        \\n        // 自动生成 HTML 插件\\n        ...HTMLPlugins\\n    ],\\n')])]),s(\"p\",[e._v(\"同打包图片，在抽取 css 时也可以指定抽取的目录，只需将路径传入 extract-text-webpack-plugin 插件的构造函数中。\\n配置 config.js 的 cssOutputPath 选项：\")]),s(\"p\",[e._v('cssOutputPath:\"./css/styles.css\",\\n这里将所有的 css 提取到 dist 文件夹下的 css 文件夹中，并命名为 style.css。')]),s(\"p\",[e._v(\"webpack.config.base.js 详细配置\")]),s(\"p\",[e._v(\"下面是 webpack.config.base.js 的详细配置文件：\")]),s(\"pre\",[s(\"code\",[e._v('      const path = require(\"path\");\\n      // 引入插件\\n      const HTMLWebpackPlugin = require(\"html-webpack-plugin\");\\n      // 清理 dist 文件夹\\n      const CleanWebpackPlugin = require(\"clean-webpack-plugin\")\\n      // 抽取 css\\n      const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\\n      // 引入多页面文件列表\\n      const config = require(\"./config\");\\n      // 通过 html-webpack-plugin 生成的 HTML 集合\\n      let HTMLPlugins = [];\\n      // 入口文件集合\\n      let Entries = {}\\n\\n      // 生成多页面的集合\\n      config.HTMLDirs.forEach((page) => {\\n          const htmlPlugin = new HTMLWebpackPlugin({\\n              filename: `${page}.html`,\\n              template: path.resolve(__dirname, `../app/html/${page}.html`),\\n              chunks: [page, \\'commons\\'],\\n          });\\n          HTMLPlugins.push(htmlPlugin);\\n          Entries[page] = path.resolve(__dirname, `../app/js/${page}.js`);\\n      })\\n\\n      module.exports = {\\n          entry:Entries,\\n          devtool:\"cheap-module-source-map\",\\n          output:{\\n              filename:\"js/[name].bundle.[hash].js\",\\n              path:path.resolve(__dirname,\"../dist\")\\n          },\\n          // 加载器\\n          module:{\\n              rules:[\\n                  {\\n                      // 对 css 后缀名进行处理\\n                      test:/\\\\.css$/,\\n                      // 不处理 node_modules 文件中的 css 文件\\n                      exclude: /node_modules/,\\n                      // 抽取 css 文件到单独的文件夹\\n                      use: ExtractTextPlugin.extract({\\n                          fallback: \"style-loader\",\\n                          // 设置 css 的 publicPath\\n                          publicPath: config.cssPublicPath,\\n                          use: [{\\n                                  loader:\"css-loader\",\\n                                  options:{\\n                                      // 开启 css 压缩\\n                                      minimize:true,\\n                                  }\\n                              },\\n                              {\\n                                  loader:\"postcss-loader\",\\n                              }\\n                          ]\\n                      })\\n                  },\\n                  {\\n                      test: /\\\\.js$/,\\n                      exclude: /node_modules/,\\n                      use: {\\n                          loader: \\'babel-loader\\',\\n                          options: {\\n                              presets: [\\'env\\']\\n                          }\\n                      }\\n                  },\\n                  {\\n                      test: /\\\\.(png|svg|jpg|gif)$/,\\n                      use:{\\n                          loader:\"file-loader\",\\n                          options:{\\n                              // 打包生成图片的名字\\n                              name:\"[name].[ext]\",\\n                              // 图片的生成路径\\n                              outputPath:config.imgOutputPath\\n                          }\\n                      }\\n                  },\\n                  {\\n                      test: /\\\\.(woff|woff2|eot|ttf|otf)$/,\\n                      use:[\"file-loader\"]\\n                  }\\n              ],\\n          },\\n          plugins:[\\n              // 自动清理 dist 文件夹\\n              new CleanWebpackPlugin([\"dist\"]),\\n              // 将 css 抽取到某个文件夹\\n              new ExtractTextPlugin(config.cssOutputPath),        \\n              // 自动生成 HTML 插件\\n              ...HTMLPlugins\\n          ],\\n      }\\n')])]),s(\"h2\",{attrs:{id:\"webpack-config-dev-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#webpack-config-dev-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" webpack.config.dev.js\")]),s(\"p\",[e._v(\"这个配置文件主要用来在开发环境使用，需要 webpack-dev-server 这个插件提供支持。该文件的配置如下：\")]),s(\"pre\",[s(\"code\",[e._v('    // 引入基础配置文件\\n    const webpackBase = require(\"./webpack.config.base\");\\n    // 引入 webpack-merge 插件\\n    const webpackMerge = require(\"webpack-merge\");\\n    // 引入配置文件\\n    const config = require(\"./config\");\\n    // 合并配置文件\\n    module.exports = webpackMerge(webpackBase,{\\n        // 配置 webpack-dev-server\\n        devServer:{\\n            // 项目根目录\\n            contentBase:config.devServerOutputPath,\\n            // 错误、警告展示设置\\n            overlay:{\\n                errors:true,\\n                warnings:true\\n            }\\n        }\\n    });\\n')])]),s(\"p\",[e._v(\"其中，webpack-merge 这个插件用来对配置文件进行合并，在 webpack.config.base.js 的基础上合并新的配置。\\ndevServer 配置项的 contentBase 项是项目的根目录，也就是我们的 dist 目录，区别在于这个 dist 目录不是硬盘上的 dist 目录，而是存在于内存中的 dist 目录。在使用 webpack-dev-server 时，将会以这个内存中的 dist 目录作为根目录。\\ndevServer 的 overlay 选项中设置了展示错误和警告，这样当代码发生错误时，会将错误信息投射到浏览器上，方便我们开发。\\n这里将 contentBase 指向了 config 中的一个配置：\")]),s(\"pre\",[s(\"code\",[e._v('    devServerOutputPath:\"../dist\",\\n    webpack.config.prod.js\\n')])]),s(\"p\",[e._v(\"该配置文件用来在生产环境启用，主要用来压缩、合并和抽取 JavaScript 代码，并将项目文件打包至硬盘上的 dist 文件夹中。\")]),s(\"pre\",[s(\"code\",[e._v('    // 引入基础配置\\n    const webpackBase = require(\"./webpack.config.base\");\\n    // 引入 webpack-merge 插件\\n    const webpackMerge = require(\"webpack-merge\");\\n    // 引入 webpack\\n    const webpack = require(\"webpack\");\\n    // 合并配置文件\\n    module.exports = webpackMerge(webpackBase,{\\n        plugins:[\\n            // 代码压缩\\n            new webpack.optimize.UglifyJsPlugin({\\n                // 开启 sourceMap\\n                sourceMap: true\\n            }),\\n            // 提取公共 JavaScript 代码\\n            new webpack.optimize.CommonsChunkPlugin({\\n                // chunk 名为 commons\\n                name: \"commons\",\\n                filename: \"[name].bundle.js\",\\n            }),\\n        ]\\n    });\\n')])]),s(\"p\",[e._v(\"在抽取公共的 JavaScript 代码时，我们将公共代码抽取为 commons.bundle.js，这个公共代码的 chunk（name）名就是 commons，在使用 html-webpack-plugin 自动生成 HTML 文件时会引用这个 chunk。\")]),s(\"pre\",[s(\"code\",[e._v(\"    webpack.config.lint.js\\n\")])]),s(\"p\",[e._v(\"这项配置用来进行代码检查，配置如下：\")]),s(\"pre\",[s(\"code\",[e._v('    const webpackBase = require(\"./webpack.config.base\");\\n    const webpackMerge = require(\"webpack-merge\");\\n    const config = require(\"./config\");\\n    module.exports = webpackMerge(webpackBase,{\\n        module:{\\n            rules:[\\n                {\\n                    test: /\\\\.js$/,\\n                    // 强制先进行 ESLint 检查\\n                    enforce: \"pre\",\\n                    // 不对 node_modules 和 lib 文件夹中的代码进行检查\\n                    exclude: /node_modules|lib/,\\n                    loader: \"eslint-loader\",\\n                    options: {\\n                        // 启用自动修复\\n                        fix:true,\\n                        // 启用警告信息\\n                        emitWarning:true,\\n                    }\\n                },\\n            ]\\n        },\\n        devServer:{\\n            contentBase:config.devServerOutputPath,\\n            overlay:{\\n                errors:true,\\n                warnings:true\\n            }\\n        }\\n    });\\n')])]),s(\"p\",[e._v('在使用 eslint-loader 时，我们设置了 enforce:\"pre\" 选项，这个选项表示在处理 JavaScript 之前先启用 ESLint 代码检查，然后再使用 babel 等 loader 对 JavaScript 进行编译。\\n在 eslint-loader 的 options 选项中，设置了自动修复和启用警告信息，这样当我们的代码出现问题时，ESLint 会首先尝试自动修复（如将双引号改为单引号），对于无法自动修复的问题，将以警告或错误的信息进行展示。')]),s(\"h2\",{attrs:{id:\"配置-eslintrc-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置-eslintrc-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 配置 .eslintrc.js\")]),s(\"p\",[e._v(\"要想使用 ESLint 进行代码检查，除了使用 eslint-loader 之外，还需针对 ESLint 本身进行配置，这就需要一个 .eslintrc.js 文件。该文件的配置如下：\")]),s(\"pre\",[s(\"code\",[e._v(\"    module.exports = {\\n      env: {\\n        browser: true,\\n        commonjs: true,\\n        es6: true,\\n        node: true,\\n      },\\n      extends: 'eslint:recommended',\\n      parserOptions: {\\n        sourceType: 'module',\\n      },\\n      rules: {\\n        'comma-dangle': ['error', 'always-multiline'],\\n        indent: ['error', 2],\\n        'linebreak-style': ['error', 'unix'],\\n        quotes: ['error', 'single'],\\n        semi: ['error', 'always'],\\n        'no-unused-vars': ['warn'],\\n        'no-console': 0,\\n      },\\n    };\\n\")])]),s(\"h2\",{attrs:{id:\"package-json-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#package-json-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" package.json\")]),s(\"pre\",[s(\"code\",[e._v('    {\\n      \"name\": \"xxx\",\\n      \"version\": \"1.0.0\",\\n      \"description\": \"\",\\n      \"main\": \"index.js\",\\n      \"scripts\": {\\n        \"dev\": \"set NODE_ENV=dev && webpack-dev-server --open\",\\n        \"build\": \"set NODE_ENV=prod && webpack -p\",\\n        \"lint\": \"set NODE_ENV=lint && webpack-dev-server --open\",\\n        \"serve\": \"http-server ./dist -p 8888 -o\",\\n        \"serve2\": \"http-server ./dist -p 8888\"\\n      },\\n      \"author\": \"\",\\n      \"license\": \"ISC\",\\n      \"devDependencies\": {\\n        \"autoprefixer\": \"^7.1.3\",\\n        \"babel-core\": \"^6.26.0\",\\n        \"babel-loader\": \"^7.1.2\",\\n        \"babel-plugin-transform-es2015-spread\": \"^6.22.0\",\\n        \"babel-preset-env\": \"^1.6.0\",\\n        \"clean-webpack-plugin\": \"^0.1.16\",\\n        \"css-loader\": \"^0.28.7\",\\n        \"eslint\": \"^4.5.0\",\\n        \"eslint-loader\": \"^1.9.0\",\\n        \"extract-text-webpack-plugin\": \"^3.0.0\",\\n        \"file-loader\": \"^0.11.2\",\\n        \"html-webpack-plugin\": \"^2.30.1\",\\n        \"http-server\": \"^0.10.0\",\\n        \"postcss-loader\": \"^2.0.6\",\\n        \"style-loader\": \"^0.18.2\",\\n        \"url-loader\": \"^0.5.9\",\\n        \"webpack\": \"^3.5.5\",\\n        \"webpack-dev-server\": \"^2.7.1\",\\n        \"webpack-merge\": \"^4.1.0\"\\n      },\\n      \"dependencies\": {}\\n    }\\n')])]),s(\"h2\",{attrs:{id:\"gitignore\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gitignore\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" .gitignore\")]),s(\"pre\",[s(\"code\",[e._v(\"    node_modules\\n    dist\\n    npm-debug.log\\n\")])]),s(\"p\",[e._v(\".babelrc\")]),s(\"pre\",[s(\"code\",[e._v('    {\\n        \"plugins\": [\"transform-es2015-spread\"]\\n    }\\n')])]),s(\"h2\",{attrs:{id:\"eslintrc-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#eslintrc-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" .eslintrc.js\")]),s(\"pre\",[s(\"code\",[e._v(\"    module.exports = {\\n      env: {\\n        browser: true,\\n        commonjs: true,\\n        es6: true,\\n        node: true,\\n      },\\n      extends: 'eslint:recommended',\\n      parserOptions: {\\n        sourceType: 'module',\\n      },\\n      rules: {\\n        'comma-dangle': ['error', 'always-multiline'],\\n        indent: ['error', 2],\\n        'linebreak-style': ['error', 'unix'],\\n        quotes: ['error', 'single'],\\n        semi: ['error', 'always'],\\n        'no-unused-vars': ['warn'],\\n        'no-console': 0,\\n      },\\n    };\\n\")])]),s(\"h2\",{attrs:{id:\"postcss-config-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#postcss-config-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" postcss.config.js\")]),s(\"pre\",[s(\"code\",[e._v(\"    module.exports = {  \\n      plugins: {  \\n        'autoprefixer': {\\n            browsers: ['last 5 version','Android >= 4.0'],\\n            //是否美化属性值 默认：true \\n            cascade: true,\\n            //是否去掉不必要的前缀 默认：true \\n            remove: true\\n        }  \\n      }  \\n    }  \\n\")])]),s(\"h2\",{attrs:{id:\"config-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#config-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" config.js\")]),s(\"pre\",[s(\"code\",[e._v('    module.exports = {\\n        HTMLDirs:[\\n            \"index\",\\n            \"company_intro\",\\n            \"enterprise_culture\",\\n            \"hornors\",\\n            \"news_center\",\\n            \"news_item\",\\n            \"product\",\\n            \"schools\",\\n            \"operate\",\\n            \"cooperate\",\\n            \"join_us\",\\n            \"contact_us\",\\n            \"investment\"\\n        ],\\n        cssPublicPath:\"../\",\\n        imgOutputPath:\"img/\",\\n        cssOutputPath:\"./css/styles.css\",\\n        devServerOutputPath:\"../dist\",\\n\\n    }\\n')])]),s(\"h2\",{attrs:{id:\"webpack-config-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#webpack-config-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" webpack.config.js\")]),s(\"pre\",[s(\"code\",[e._v('    // 获取环境命令，并去除首尾空格\\n    const env = process.env.NODE_ENV.replace(/(\\\\s*$)|(^\\\\s*)/ig,\"\");\\n    // 根据环境变量引用相关的配置文件\\n    module.exports = require(`./config/webpack.config.${env}.js`)\\n    webpack.config.base.js\\n\\n    const path = require(\"path\");\\n    // 引入插件\\n    const HTMLWebpackPlugin = require(\"html-webpack-plugin\");\\n    // 清理 dist 文件夹\\n    const CleanWebpackPlugin = require(\"clean-webpack-plugin\")\\n    // 抽取 css\\n    const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\\n    // 引入多页面文件列表\\n    const config = require(\"./config\");\\n    // 通过 html-webpack-plugin 生成的 HTML 集合\\n    let HTMLPlugins = [];\\n    // 入口文件集合\\n    let Entries = {}\\n\\n    // 生成多页面的集合\\n    config.HTMLDirs.forEach((page) => {\\n        const htmlPlugin = new HTMLWebpackPlugin({\\n            filename: `${page}.html`,\\n            template: path.resolve(__dirname, `../app/html/${page}.html`),\\n            chunks: [page, \\'commons\\'],\\n        });\\n        HTMLPlugins.push(htmlPlugin);\\n        Entries[page] = path.resolve(__dirname, `../app/js/${page}.js`);\\n    })\\n\\n    module.exports = {\\n        entry:Entries,\\n        devtool:\"cheap-module-source-map\",\\n        output:{\\n            filename:\"js/[name].bundle.[hash].js\",\\n            path:path.resolve(__dirname,\"../dist\")\\n        },\\n        // 加载器\\n        module:{\\n            rules:[\\n                {\\n                    // 对 css 后缀名进行处理\\n                    test:/\\\\.css$/,\\n                    // 不处理 node_modules 文件中的 css 文件\\n                    exclude: /node_modules/,\\n                    // 抽取 css 文件到单独的文件夹\\n                    use: ExtractTextPlugin.extract({\\n                        fallback: \"style-loader\",\\n                        // 设置 css 的 publicPath\\n                        publicPath: config.cssPublicPath,\\n                        use: [{\\n                                loader:\"css-loader\",\\n                                options:{\\n                                    // 开启 css 压缩\\n                                    minimize:true,\\n                                }\\n                            },\\n                            {\\n                                loader:\"postcss-loader\",\\n                            }\\n                        ]\\n                    })\\n                },\\n                {\\n                    test: /\\\\.js$/,\\n                    exclude: /node_modules/,\\n                    use: {\\n                        loader: \\'babel-loader\\',\\n                        options: {\\n                            presets: [\\'env\\']\\n                        }\\n                    }\\n                },\\n                {\\n                    test: /\\\\.(png|svg|jpg|gif)$/,\\n                    use:{\\n                        loader:\"file-loader\",\\n                        options:{\\n                            // 打包生成图片的名字\\n                            name:\"[name].[ext]\",\\n                            // 图片的生成路径\\n                            outputPath:config.imgOutputPath\\n                        }\\n                    }\\n                },\\n                {\\n                    test: /\\\\.(woff|woff2|eot|ttf|otf)$/,\\n                    use:[\"file-loader\"]\\n                }\\n            ],\\n        },\\n        plugins:[\\n            // 自动清理 dist 文件夹\\n            new CleanWebpackPlugin([\"dist\"]),\\n            // 将 css 抽取到某个文件夹\\n            new ExtractTextPlugin(config.cssOutputPath),        \\n            // 自动生成 HTML 插件\\n            ...HTMLPlugins\\n        ],\\n    }\\n')])]),s(\"h2\",{attrs:{id:\"webpack-config-dev-js-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#webpack-config-dev-js-2\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" webpack.config.dev.js\")]),s(\"pre\",[s(\"code\",[e._v('    // 引入基础配置文件\\n    const webpackBase = require(\"./webpack.config.base\");\\n    // 引入 webpack-merge 插件\\n    const webpackMerge = require(\"webpack-merge\");\\n    // 引入配置文件\\n    const config = require(\"./config\");\\n    // 合并配置文件\\n    module.exports = webpackMerge(webpackBase,{\\n        // 配置 webpack-dev-server\\n        devServer:{\\n            // 项目根目录\\n            contentBase:config.devServerOutputPath,\\n            // 错误、警告展示设置\\n            overlay:{\\n                errors:true,\\n                warnings:true\\n            }\\n        }\\n    });\\n')])]),s(\"h2\",{attrs:{id:\"webpack-config-prod-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#webpack-config-prod-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" webpack.config.prod.js\")]),s(\"pre\",[s(\"code\",[e._v('    // 引入基础配置\\n    const webpackBase = require(\"./webpack.config.base\");\\n    // 引入 webpack-merge 插件\\n    const webpackMerge = require(\"webpack-merge\");\\n    // 引入 webpack\\n    const webpack = require(\"webpack\");\\n    // 合并配置文件\\n    module.exports = webpackMerge(webpackBase,{\\n        plugins:[\\n            // 代码压缩\\n            new webpack.optimize.UglifyJsPlugin({\\n                // 开启 sourceMap\\n                sourceMap: true\\n            }),\\n            // 提取公共 JavaScript 代码\\n            new webpack.optimize.CommonsChunkPlugin({\\n                // chunk 名为 commons\\n                name: \"commons\",\\n                filename: \"[name].bundle.js\",\\n            }),\\n        ]\\n    });\\n')])]),s(\"h2\",{attrs:{id:\"webpack-config-lint-js\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#webpack-config-lint-js\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" webpack.config.lint.js\")]),s(\"pre\",[s(\"code\",[e._v('    const webpackBase = require(\"./webpack.config.base\");\\n    const webpackMerge = require(\"webpack-merge\");\\n    const config = require(\"./config\");\\n    module.exports = webpackMerge(webpackBase,{\\n        module:{\\n            rules:[\\n                {\\n                    test: /\\\\.js$/,\\n                    // 强制先进行 ESLint 检查\\n                    enforce: \"pre\",\\n                    // 不对 node_modules 和 lib 文件夹中的代码进行检查\\n                    exclude: /node_modules|lib/,\\n                    loader: \"eslint-loader\",\\n                    options: {\\n                        // 启用自动修复\\n                        fix:true,\\n                        // 启用警告信息\\n                        emitWarning:true,\\n                    }\\n                },\\n            ]\\n        },\\n        devServer:{\\n            contentBase:config.devServerOutputPath,\\n            overlay:{\\n                errors:true,\\n                warnings:true\\n            }\\n        }\\n    });\\n')])]),s(\"h2\",{attrs:{id:\"项目结构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#项目结构\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 项目结构\")]),s(\"pre\",[s(\"code\",[e._v(\"    │  .babelrc\\n    │  .eslintrc.js\\n    │  .gitignore\\n    │  package.json\\n    │  postcss.config.js\\n    │  webpack.config.js\\n    │  \\n    ├─app\\n    │  │  favicon.ico\\n    │  │  \\n    │  ├─css\\n    │  │      main.css\\n    │  │      \\n    │  ├─html\\n    │  │      index.html\\n    │  │    \\n    │  │      \\n    │  ├─img\\n    │  │      back.png\\n    │  │      \\n    │  ├─js\\n    │  │      ajax.js\\n    │  │      footer.js\\n    │  │      index.js\\n    │  │      nav.js\\n    │  │      public.js\\n    │  │      tity_nav.js\\n    │  │      \\n    │  └─lib\\n    │        flexible.js\\n    │        normalize.css\\n    │        swiper.css\\n    │        swiper.js\\n    │        \\n    └─config\\n            config.js\\n            webpack.config.base.js\\n            webpack.config.dev.js\\n            webpack.config.lint.js\\n            webpack.config.prod.js\\n\")])]),s(\"hr\"),s(\"hr\"),s(\"hr\"),s(\"hr\"),s(\"h2\",{attrs:{id:\"注释：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注释：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 注释：\")]),s(\"h4\",{attrs:{id:\"想引用jquery而不是每个页面都引用只需要：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#想引用jquery而不是每个页面都引用只需要：\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 想引用jquery而不是每个页面都引用只需要：\")]),s(\"h4\",{attrs:{id:\"引入jquery后如果开启lint检查模式-可以正常使用的前提是每个页面都require-一次\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#引入jquery后如果开启lint检查模式-可以正常使用的前提是每个页面都require-一次\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 引入jquery后如果开启lint检查模式 可以正常使用的前提是每个页面都require 一次\")]),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"webpack.config.base.js\")]),s(\"pre\",[s(\"code\",[e._v(\"  cnpm i jquery --save\\n  \\n  const ProvidePlugin = new webpack.ProvidePlugin({\\n    $: 'jquery',\\n    jQuery: 'jquery',\\n  });\\n\")])])])]),s(\"h4\",{attrs:{id:\"引入sass\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#引入sass\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 引入sass\")]),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"webpack.config.base.js\")]),s(\"pre\",[s(\"code\",[e._v('  {\\n      // s?css => scss或者css\\n      test:/\\\\.s?css$/,\\n      // 不处理 node_modules 文件中的 css 文件\\n      exclude: /node_modules/,\\n      // 抽取 css 文件到单独的文件夹\\n      use: ExtractTextPlugin.extract({\\n          fallback: \"style-loader\",\\n          // 设置 css 的 publicPath\\n          publicPath: config.cssPublicPath,//在 css 中设置背景图像的 url 时，经常会找不到图片（默认会在 css 文件所在的文件夹中寻找），这里设置 extract-text-webpack-plugin 插件的 publicPath 为图片文件夹所在的目录，就可以顺利找到图片了\\n          use: [{\\n                  loader:\"css-loader\",\\n                  options:{\\n                      // 开启 css 压缩\\n                      minimize:true,\\n                  }\\n              },\\n              {\\n                  loader:\"postcss-loader\",\\n              },\\n              {\\n                  loader:\"sass-loader\", \\n                  //启用sass 虽然在这只写了sass-loader 但还要下载node-sass\\n              }\\n          ]\\n      })\\n  },\\n')])])])]),s(\"h4\",{attrs:{id:\"如果import了类似swiper这种库函数-但不处理modules里面的swiper-所以这里要允许除了node-modules里面的swiper的其他所有文件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如果import了类似swiper这种库函数-但不处理modules里面的swiper-所以这里要允许除了node-modules里面的swiper的其他所有文件\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 如果import了类似swiper这种库函数 但不处理modules里面的swiper,所以这里要允许除了node_modules里面的swiper的其他所有文件\")]),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"webpack.config.base.js\")]),s(\"pre\",[s(\"code\",[e._v(\"  {\\n      test: /\\\\.js$/,\\n      exclude: /^node_modules*swiper$/, \\n      use: {\\n          loader: 'babel-loader',\\n          options: {\\n              presets: ['env']\\n          }\\n      }\\n  },\\n\")])])])])])}],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}